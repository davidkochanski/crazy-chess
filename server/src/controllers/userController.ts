import { z } from "zod";
import Users from "../models/Users";
import appAssert from "../utils/appAssert";
import catchErrorsAsynchronously from "../utils/catchErrorsAsynchonously";

export const userHandler = catchErrorsAsynchronously(
    async (req, res) => {
        // get the user from the database, assume it's already verified and all that
        const user = await Users.findById(req.userId);

        if(user) {
            return res.status(200).json(user.omitPassword());
        } else {
            return res.status(404).json(null);
        }
    }
)


const setNameSchema = z.object({
    newName: z.string().min(1).max(31),
    userId: z.string() // THIS IS AUTOMATICALLY GENERATED BY THE PROTECTWITHAUTH MIDDLEWARE. 
                       // SAME WITH SESSION (not needed here tho)
})


export const setNameHandler = catchErrorsAsynchronously(
    async (req, res) => {
        const request = setNameSchema.parse({...req.body, userId: req.userId }); // the userId from middleware

        const user = await Users.findById(request.userId)
        appAssert(user, 404, "User not found.");

        user.name = request.newName; // obv this should be more sanitary
        await user.save();
        appAssert(user, 500, "Something went wrong saving the name.");

        return res.status(200).json({ message: "Successfully updated name." })
    }
)